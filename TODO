   → 

Solution Design (→ development/Enterprise/Architecture/Solution-design/index)
 - Dokumentation,
 - Beschreibung der Lösung
 - Entwicklung von Schittstellen
 - Quality Assurance,


    Solution Architecture
      
    Software Engineering
    Continuous Integration
    Project Estimation
    Project Planning
    Insurance

    Java
    Java Enterprise Edition
    JUnit
    SQL
    UML
    Hibernate
    XML
    Tomcat
    JavaScript
    Oracle
    Spring
    Linux
    JIRA
    Struts
    jQuery
    WebSphere Application Server
    AJAX
    Jenkins
    RESTful WebServices


  ----
    → development/SDLC/index#solution-design
    → development/SDLC/roles/index


{ Solution design

   A design is the order of a system that connects individual components.

   - Why
   - Scope
   - Definitions
   - Overview
         - System - product
         - service
         - product or
         - process
         - tools
             - 
             
   - Constraints / consideration
         - commercial
         - legal
         - environmental
         - security
         - safety 
         - reliability
         - reusabilty
         - resource utilization
         - portability
         - technical risk
         - issues
         - serviceability
         - assumptions

    Delegate ownership of more detailed design activity

  { High level design (HLD)

    Non-technical to mildly technical terms

    Purpose:
      - Outline all parts of the software
      - Add necessary detail to current project description to create a techinical (programming) model
      - Help detect contradictions before programming is started
      - Coordinate a large team under a single vision
      - Stable reference

  }

  { High level design (HLD) vs low level design

    
      Two types of program design phases:
        - Architectural or high-level design
        - Detailed or low-level design

    

  }

  { Design documentation

    - Serve the audience (-> therefore: know your audience (culture), language: is the audience technical, marketing, design. Is the audi Who is primary, who is secondary audience?)
    - What does the audience need.
    - Story telling (Scenario and walk through)
    - Describe design's
      - rationale (why features added or not added)
      - implications
    - Capture desisions
      - Pros and cons
    - Complete information
    - Clearly written
    - Approach

  }

  { solution design document (SDD)


     
    

  }


}


  Data Governance

  PRINCE2

  PMP (→ development/Software-design/Project/management)

  Is Azure and AWS a → development/Cloud#cloud-service-models[IaaS service]?

  NoSQL


  Technology stack:
    • API Gateway: Zuul Edge Server
    • Service discovery: Eureka
    • Load balancer: Ribbon
    • Circuit breaker: Hysterix
    • Event stream

  → https://en.wikipedia.org/wiki/Software_metric

   Database sharding to avoid locks
   -
   Service cloning
   -
   Functional decomposition

  Silos (See → development/Software-design/System-integration)

  Micro services:
    Complexity: tooling, automation, process

  Fit/GAP Analysis (GAP = Good, Avarage, Poor)

  ESB (= → development/Software-design/Enterprise-Service-Bus[Enterprise Service Bus]) / Horizontal system integration?

  → misc/ISO/12207[ISO/IEC 12207] is a standard for software life-cycle processes.

  → development/SDLC/roles
  -
  Business Analyst vs System Analyst
  -
  Change control board
  -
  Functional Analyst (FA). How does Solution Architect support the functional analyst. FA vs BA vs Requirement analyst.

  System Integration, Enterprise Application Integration

  Martin Fowler: Enterprise Architecture


  Review Board

  → development/web/service/BPEL, relation to BPMN (Business Process Modeling Notation)

  → development/Software-design/Architecture/Messaging (AMQP, MSMQ, JMS …)

  → #sdlc-devops / Continouos Delivery


  → development/Software-design/Architecture#software-architecture-security / Also SQL injection and cross site scripting (XSS)
  -
  What is more important: threats or vulnerabilities

  → development/SDLC/Artifacts:
  • most important artifacts
  • → https://sdlc.uconn.edu/artifact-list/
  • SRS = Software Requirement Specification
  • → https://sdlc.uconn.edu/artifact-matrix/
  • Functional Requirement Document
  • DDS = Design Document Specifcation

  COTS: Commercial off-the-shelf

  → development/Software-design/process

  GoF: → development/Software-design/patterns / Architectural patterns
  -
  SOA design patterns

  Recent technology trends

  → development/SDLC/roles#solution-architect-skills[Required skills] for a solution architect.

  → development/Enterprise/Architecture#ea-roadmap[Architectural roadmap]

  metrics
    • conformance of solution to an architecture

  Kanban

  → development/Enterprise/Architecture#ea-eisa[Enterprise information security]

  Federated identity management

  → #sdlc-methods[Methods]: OOD vs CBD (component based design) / vs Aspect Oriented design. 

  → development/Enterprise/IT-portfolio-management


  → Microsoft/Azure / → development/Cloud

  SOA: → development/Software-design/SOA#orchestration-vs-choreography

  Tools
    • manage artifacts
    • Redmine
    • Splunk
    • Git
    • Pact and Pacto help maintaining and testing consumer-driven → development/Software-design/SOA#soa-contract[contracts].

  → development/Enterprise/Architecture#ea-frameworks[Enterprise architecture frameworks], such as → development/IT/TOGAF
  -

  → #application-lifecycle-management (ALM)

  Role of solution architect during different phases of SDLC

  Methodologies: Waterfall vs Agile/Scrum 

  → development/IT/ITIL/ITSM#itsm-service-desk[Service desk]
  → development/Software-design/SOA (vs micro services) / SOA lifecycle, → http://www.opengroup.org/soa/source-book/soa/p4.htm
  -
  → development/Software-design/SOA#soa-design-principles[design principles] when architecting SOA patterns (Compare → https://en.wikipedia.org/wiki/Service-orientation_design_principles)

  difference between agile and → development/Software-design/methods/Agile/Scrum

  → development/IT/SLA.

  Operational level agreement

  → development/IT/ITIL

  → development/IT/ITIL#itil-incident-vs-problem[Incident Management vs Problem Management]

  → development/IT/ITIL#itil-incident-vs-problem[Change Management vs Release Management]

  → development/Software-design/methods/Agile/SAFe

  → development/Software-design/Project#project-standish-report

  SOA: compensation mechanisms (because rollback doesn't exist in BASE). A compensation can be views as a logical undo.
  -
  CAP: Conistency, Availability and Partition. Apparently a characteristic of NoSQL

  Loose coupling / loosly coupled
  -
  latency and versioning

  → development/Cloud#cloud-service-models[Cloud servce models]: SaaS, PaaS, IaaS / Examples

  → development/tools/Continuous-integration vs Continuous delivery

  → development/IT/COBIT

  → development/Software-design/System-integration

  → https://github.com/ReneNyffenegger/temp-IT/blob/master/Organization.ods

  PowerCenter (→ development/Enterprise/Integration/data)

  → development/Software-design/methods/Agile/index#agile-framework

  → development/Software-design/Project/management#pmbok

  → development/IT/governance/index

  → development/IT#it-standards-practices

* ----- *

    ClearCase

    Agile Methodologies
      → https://www.versionone.com/agile-101/agile-methodologies/
      → development/Software-design/methods/Agile/index

    Enterprise Architecture

    Web Services
      → development/web/service/WSDL[Web Services (WSDL)], relationship to SOAP, REST, UDDI etc / Microsofts implementation is WCF / Apache Thrift / OPC_UA
      → development/web/service/SOAP, → development/web/service/REST

    Business Analysis
      → development/Software-design/Project/Business-analysis/ : SWOT vs MOST

    Agile Project Management

    UML
      → development/UML offers a way to visualize a system's architectural blueprints in a diagram. Compare with BPMN.


    OOP

    IT Strategy
      IT strategy is the discipline that defines how IT will be used to help businesses win in their chosen business context.

    Project Management

    SDLC
